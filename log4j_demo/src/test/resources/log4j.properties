# 指定 RootLogger 顶级父元素默认配置信息
# 指定日志级别 = trace， 使用的appender 为 console
log4j.rootLogger = trace,console
#log4j.rootLogger = trace,console,file


# 自定义 logger 对象设置
log4j.logger.com.code = trace,file

# 指定控制台日志输出的 appender
log4j.appender.console = org.apache.log4j.ConsoleAppender

# 指定消息格式 layout
log4j.appender.console.layout = org.apache.log4j.PatternLayout
#log4j.appender.console.layout = org.apache.log4j.SimpleLayout
#log4j.appender.console.layout = org.apache.log4j.HTMLLayout
#log4j.appender.console.layout = org.apache.log4j.xml.XMLLayout

#指定消息格式的内容
log4j.appender.console.layout.conversionPattern = [%-5p] %r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n
#log4j.appender.console.layout.conversionPattern =[%p] %r %c %t %F %L %d{yyyy-MM-dd HH:mm:ss.SSS}%m%n
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss.SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )
# %F 输出消息日志产生时所在的文件名称
# %L 输出代码中的行号
# %% 输出一个%字符


# 指定日志文件输出的 appender 对象
log4j.appender.file = org.apache.log4j.FileAppender
# 指定消息格式 layout
log4j.appender.file.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.file.layout.conversionPattern = [%-5p] %r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n
# 指定日志文件的保存路径
log4j.appender.file.file = E:/CodingFile/IdeaProjects/demotree/log4j_demo/src/test/resources/logs/log4j.log
# 指定日志文件的字符集
log4j.appender.file.encoding = UTF-8


# 按照文件大小拆分的 appender 对象
log4j.appender.rollingFile = org.apache.log4j.RollingFileAppender
# 指定消息格式 layout
log4j.appender.rollingFile.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.rollingFile.layout.conversionPattern = [%-5p] %r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n
# 指定日志文件的保存路径
log4j.appender.rollingFile.file = E:/CodingFile/IdeaProjects/demotree/log4j_demo/src/test/resources/logs/log4j.log
# 指定日志文件的字符集
log4j.appender.rollingFile.encoding = UTF-8
# 指定日志文件内容的大小
log4j.appender.rollingFile.maxFileSize = 1MB
# 指定日志文件的数量
log4j.appender.rollingFile.maxBackupIndex = 10


# 按照时间拆分的 appender 对象
log4j.appender.dailyFile = org.apache.log4j.DailyRollingFileAppender
# 指定消息格式 layout
log4j.appender.dailyFile.layout = org.apache.log4j.PatternLayout
# 指定消息格式的内容
log4j.appender.dailyFile.layout.conversionPattern = [%-5p] %r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n
# 指定日志文件的保存路径
log4j.appender.dailyFile.file = E:/CodingFile/IdeaProjects/demotree/log4j_demo/src/test/resources/logs/log4j.log
# 指定日志文件的字符集
log4j.appender.dailyFile.encoding = UTF-8
# 指定日期拆分规则(以秒拆分)
log4j.appender.dailyFile.datePattern = '.'yyyy-MM-dd-HH-mm-ss



#mysql
log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
log4j.appender.logDB.Driver=com.mysql.cj.jdbc.Driver
log4j.appender.logDB.URL=jdbc:mysql://localhost:3306/vueblog
log4j.appender.logDB.User=root
log4j.appender.logDB.Password=fanxs98x
log4j.appender.logDB.Sql=INSERT INTO \
  log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) \
  values('log4j_test','%d{yyyy-MM-ddHH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')


